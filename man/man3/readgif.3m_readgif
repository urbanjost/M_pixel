." Text automatically generated by txt2man
.TH "readgif" "3m_readgif" "August 23, 2020" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBreadgif(3f) \fP- [M_readgif] read a GIF file
\fB(LICENSE:PD)
\fB
.SH SYNOPSIS
.nf
.fam C
subroutine \fBreadgif\fP(\fIfilename\fP, \fInum_image\fP, \fIimage\fP, \fIiostat\fP, \fIcolor_map\fP, \fIverbose\fP)
.PP
.nf
.fam C
   character(len=*), intent(in) :: filename
   integer, intent(in)          :: num_image
   integer, intent(out), allocatable :: image(:,:)
   integer, intent(out)         :: iostat
   real   , allocatable, intent(out) :: color_map(:,:)
   logical, intent(in), optional :: verbose

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
read the \fInum_image\fP'th gif \fIimage\fP from \fIfilename\fP into arrays \fIimage\fP and \fIcolor_map\fP
.SH OPTIONS
.TP
.B \fIfilename\fP
input file
.TP
.B \fInum_image\fP
number of \fIimage\fP required
.TP
.B \fIimage\fP
Image data returned
.TP
.B \fIiostat\fP
I/O error number, =0 if ok
.TP
.B \fIcolor_map\fP
RGB for each level, range 0.0 to 1.0
.TP
.B \fIverbose\fP
.true.for \fIverbose\fP output
.SH EXAMPLE
Sample program:
.PP
.nf
.fam C
      program demo_readgif
      use M_readgif, only : readgif
      use M_writegif, only : writegif
      implicit none
      character(len=*),parameter :: filename='boxes.gif'
      integer                    :: num_image=1
      integer,allocatable        :: image(:,:)
      integer                    :: iostat=0
      real,allocatable           :: color_map(:,:)
      integer,allocatable        :: color_map2(:,:)
      logical                    :: verbose=.true.
      integer                    :: i,ii,jj
      call readgif(filename,num_image,image,iostat,color_map,verbose)
      if(iostat.ne.0)then
         write(*,*)'*demo_readgif* could not read GIF file ',trim(filename)
         stop
      endif

      write(*,*)'SIZE OF IMAGE =',size(image)
      do i=1,rank(image)
         write(*,*)'RANK OF IMAGE=',i,size(image,dim=i)
      enddo

      write(*,*)'SIZE OF COLORMAP=',size(color_map)
      do i=1,rank(color_map)
         write(*,*)'RANK OF COLORMAP=',i,size(color_map,dim=i)
      enddo

      ! convert between colormap types
      ! writegif uses an integer colormap, values 0 to 255
      ! readgif  uses real values 0.0 to 1.0
      ii=size(color_map,dim=1)
      jj=size(color_map,dim=2)
      allocate(color_map2(ii,0:jj-1))
      color_map2=255*color_map

      ! change color and write standard gif file
      where (image.eq.1) image=4
      call writegif('boxes_new.gif',image,color_map2)

      end program demo_readgif

.fam T
.fi
.SH AUTHORS
Jos Bergervoet, Van Snyder, Maurizio Cremonesi, Clive Page, and others
.SH LICENSE
This module contains a subroutine \fBreadgif\fP(3f) which can read GIF files
of types Gif87a and Gif89 (and maybe others). The code comes from
various authors, see comments below. This version was put together
by Clive Page who has put it into the public domain.
