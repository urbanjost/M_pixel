." Text automatically generated by txt2man
.TH "viewport" "3m_pixel" "August 24, 2020" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBviewport(3f) \fP- [M_pixel] Specify which part of the screen to draw in.
\fB(LICENSE:PD)
\fB
.SH SYNOPSIS
.nf
.fam C
definition:
.PP
.nf
.fam C
   subroutine viewport(left, right, bottom, top)
   real,intent(in) :: left, right, bottom, top

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
Specify which part of the screen to draw in. Left, right, bottom,
and top are real values in screen coordinates (0:n,0:m).
.PP
If a pixel array has been declared to be real :: \fBarray\fP(600,400)
.PP
.nf
.fam C
        o-----> X                         (right=600,top=0)
        | #------------------------------------#
        | |                                    |
        | |                                    |
        V |                                    |
        Y |                                    |
          #------------------------------------#
.fam T
.fi
(left=0,bottom=400)
.SH EXAMPLE
program demo_viewport
use :: M_pixel
use :: M_writegif, only : writegif
implicit none
call \fBprefsize\fP(400, 400) ! set up drawing surface
call \fBvinit\fP()
call \fBcolor\fP(7)
call \fBlinewidth\fP(40)
call \fBclear\fP()
call \fBortho2\fP(\fB-88.0\fP, 88.0, \fB-88.0\fP, 88.0)
! draw the same circle, just changing viewport
.RS
.TP
.B call \fBviewport\fP(
0.0, 200.0,   0.0, 200.0 ); call \fBdraw_circle\fP(1)
.TP
.B call \fBviewport\fP( 200.0, 400.0,
0.0, 200.0 ); call \fBdraw_circle\fP(2)
.TP
.B call \fBviewport\fP(
0.0, 200.0, 200.0, 400.0 ); call \fBdraw_circle\fP(3)
call \fBviewport\fP( 200.0, 400.0, 200.0, 400.0 ); call \fBdraw_circle\fP(4)
call \fBviewport\fP( 250.0, 350.0, 150.0, 300.0 ); call \fBdraw_circle\fP(5)
.PP
call \fBwritegif\fP('viewport.3m_pixel.gif',P_pixel,P_colormap)
!call \fBexecute_command_line\fP('display viewport.3m_pixel.gif')
call \fBvexit\fP()
contains
subroutine \fBdraw_circle\fP(icolor)
\fBinteger,intent\fP(in) :: icolor
call \fBcolor\fP(0)
call \fBrect\fP(\fB-88.0\fP,\fB-88.0\fP,88.0,88.0)
call \fBcolor\fP(icolor)
call \fBmakepoly\fP()
call \fBcircle\fP(0.0,0.0,88.0)
call \fBclosepoly\fP()
end subroutine draw_circle
end program demo_viewport
.SH AUTHOR
John S. Urban
.SH LICENSE
Public Domain
